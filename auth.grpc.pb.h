// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: auth.proto
#ifndef GRPC_auth_2eproto__INCLUDED
#define GRPC_auth_2eproto__INCLUDED

#include "auth.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace auth {

class Authenticator final {
 public:
  static constexpr char const* service_full_name() {
    return "auth.Authenticator";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Login(::grpc::ClientContext* context, const ::auth::LoginRequest& request, ::auth::LoginResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auth::LoginResponse>> AsyncLogin(::grpc::ClientContext* context, const ::auth::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auth::LoginResponse>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auth::LoginResponse>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::auth::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auth::LoginResponse>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    virtual ::grpc::Status Logout(::grpc::ClientContext* context, const ::auth::LogoutRequest& request, ::auth::LogoutResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auth::LogoutResponse>> AsyncLogout(::grpc::ClientContext* context, const ::auth::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auth::LogoutResponse>>(AsyncLogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auth::LogoutResponse>> PrepareAsyncLogout(::grpc::ClientContext* context, const ::auth::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auth::LogoutResponse>>(PrepareAsyncLogoutRaw(context, request, cq));
    }
    virtual ::grpc::Status Validate(::grpc::ClientContext* context, const ::auth::ValidationRequest& request, ::auth::ValidationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auth::ValidationResponse>> AsyncValidate(::grpc::ClientContext* context, const ::auth::ValidationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auth::ValidationResponse>>(AsyncValidateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auth::ValidationResponse>> PrepareAsyncValidate(::grpc::ClientContext* context, const ::auth::ValidationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::auth::ValidationResponse>>(PrepareAsyncValidateRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Login(::grpc::ClientContext* context, const ::auth::LoginRequest* request, ::auth::LoginResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auth::LoginResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Logout(::grpc::ClientContext* context, const ::auth::LogoutRequest* request, ::auth::LogoutResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auth::LogoutResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Validate(::grpc::ClientContext* context, const ::auth::ValidationRequest* request, ::auth::ValidationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Validate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auth::ValidationResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::auth::LoginResponse>* AsyncLoginRaw(::grpc::ClientContext* context, const ::auth::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::auth::LoginResponse>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::auth::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::auth::LogoutResponse>* AsyncLogoutRaw(::grpc::ClientContext* context, const ::auth::LogoutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::auth::LogoutResponse>* PrepareAsyncLogoutRaw(::grpc::ClientContext* context, const ::auth::LogoutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::auth::ValidationResponse>* AsyncValidateRaw(::grpc::ClientContext* context, const ::auth::ValidationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::auth::ValidationResponse>* PrepareAsyncValidateRaw(::grpc::ClientContext* context, const ::auth::ValidationRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Login(::grpc::ClientContext* context, const ::auth::LoginRequest& request, ::auth::LoginResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auth::LoginResponse>> AsyncLogin(::grpc::ClientContext* context, const ::auth::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auth::LoginResponse>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auth::LoginResponse>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::auth::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auth::LoginResponse>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    ::grpc::Status Logout(::grpc::ClientContext* context, const ::auth::LogoutRequest& request, ::auth::LogoutResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auth::LogoutResponse>> AsyncLogout(::grpc::ClientContext* context, const ::auth::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auth::LogoutResponse>>(AsyncLogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auth::LogoutResponse>> PrepareAsyncLogout(::grpc::ClientContext* context, const ::auth::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auth::LogoutResponse>>(PrepareAsyncLogoutRaw(context, request, cq));
    }
    ::grpc::Status Validate(::grpc::ClientContext* context, const ::auth::ValidationRequest& request, ::auth::ValidationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auth::ValidationResponse>> AsyncValidate(::grpc::ClientContext* context, const ::auth::ValidationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auth::ValidationResponse>>(AsyncValidateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auth::ValidationResponse>> PrepareAsyncValidate(::grpc::ClientContext* context, const ::auth::ValidationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::auth::ValidationResponse>>(PrepareAsyncValidateRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Login(::grpc::ClientContext* context, const ::auth::LoginRequest* request, ::auth::LoginResponse* response, std::function<void(::grpc::Status)>) override;
      void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auth::LoginResponse* response, std::function<void(::grpc::Status)>) override;
      void Logout(::grpc::ClientContext* context, const ::auth::LogoutRequest* request, ::auth::LogoutResponse* response, std::function<void(::grpc::Status)>) override;
      void Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auth::LogoutResponse* response, std::function<void(::grpc::Status)>) override;
      void Validate(::grpc::ClientContext* context, const ::auth::ValidationRequest* request, ::auth::ValidationResponse* response, std::function<void(::grpc::Status)>) override;
      void Validate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auth::ValidationResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::auth::LoginResponse>* AsyncLoginRaw(::grpc::ClientContext* context, const ::auth::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::auth::LoginResponse>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::auth::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::auth::LogoutResponse>* AsyncLogoutRaw(::grpc::ClientContext* context, const ::auth::LogoutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::auth::LogoutResponse>* PrepareAsyncLogoutRaw(::grpc::ClientContext* context, const ::auth::LogoutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::auth::ValidationResponse>* AsyncValidateRaw(::grpc::ClientContext* context, const ::auth::ValidationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::auth::ValidationResponse>* PrepareAsyncValidateRaw(::grpc::ClientContext* context, const ::auth::ValidationRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Login_;
    const ::grpc::internal::RpcMethod rpcmethod_Logout_;
    const ::grpc::internal::RpcMethod rpcmethod_Validate_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Login(::grpc::ServerContext* context, const ::auth::LoginRequest* request, ::auth::LoginResponse* response);
    virtual ::grpc::Status Logout(::grpc::ServerContext* context, const ::auth::LogoutRequest* request, ::auth::LogoutResponse* response);
    virtual ::grpc::Status Validate(::grpc::ServerContext* context, const ::auth::ValidationRequest* request, ::auth::ValidationResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Login() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* context, const ::auth::LoginRequest* request, ::auth::LoginResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::auth::LoginRequest* request, ::grpc::ServerAsyncResponseWriter< ::auth::LoginResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Logout() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* context, const ::auth::LogoutRequest* request, ::auth::LogoutResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogout(::grpc::ServerContext* context, ::auth::LogoutRequest* request, ::grpc::ServerAsyncResponseWriter< ::auth::LogoutResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Validate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Validate() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Validate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Validate(::grpc::ServerContext* context, const ::auth::ValidationRequest* request, ::auth::ValidationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidate(::grpc::ServerContext* context, ::auth::ValidationRequest* request, ::grpc::ServerAsyncResponseWriter< ::auth::ValidationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Login<WithAsyncMethod_Logout<WithAsyncMethod_Validate<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Login() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::auth::LoginRequest, ::auth::LoginResponse>(
          [this](::grpc::ServerContext* context,
                 const ::auth::LoginRequest* request,
                 ::auth::LoginResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Login(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* context, const ::auth::LoginRequest* request, ::auth::LoginResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Login(::grpc::ServerContext* context, const ::auth::LoginRequest* request, ::auth::LoginResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Logout() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::auth::LogoutRequest, ::auth::LogoutResponse>(
          [this](::grpc::ServerContext* context,
                 const ::auth::LogoutRequest* request,
                 ::auth::LogoutResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Logout(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* context, const ::auth::LogoutRequest* request, ::auth::LogoutResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Logout(::grpc::ServerContext* context, const ::auth::LogoutRequest* request, ::auth::LogoutResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Validate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Validate() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::auth::ValidationRequest, ::auth::ValidationResponse>(
          [this](::grpc::ServerContext* context,
                 const ::auth::ValidationRequest* request,
                 ::auth::ValidationResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Validate(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Validate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Validate(::grpc::ServerContext* context, const ::auth::ValidationRequest* request, ::auth::ValidationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Validate(::grpc::ServerContext* context, const ::auth::ValidationRequest* request, ::auth::ValidationResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_Login<ExperimentalWithCallbackMethod_Logout<ExperimentalWithCallbackMethod_Validate<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Login() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* context, const ::auth::LoginRequest* request, ::auth::LoginResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Logout() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* context, const ::auth::LogoutRequest* request, ::auth::LogoutResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Validate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Validate() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Validate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Validate(::grpc::ServerContext* context, const ::auth::ValidationRequest* request, ::auth::ValidationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Login() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* context, const ::auth::LoginRequest* request, ::auth::LoginResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Logout() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* context, const ::auth::LogoutRequest* request, ::auth::LogoutResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogout(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Validate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Validate() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Validate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Validate(::grpc::ServerContext* context, const ::auth::ValidationRequest* request, ::auth::ValidationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Login() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Login(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* context, const ::auth::LoginRequest* request, ::auth::LoginResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Login(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Logout() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Logout(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* context, const ::auth::LogoutRequest* request, ::auth::LogoutResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Logout(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Validate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Validate() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Validate(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Validate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Validate(::grpc::ServerContext* context, const ::auth::ValidationRequest* request, ::auth::ValidationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Validate(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Login() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::auth::LoginRequest, ::auth::LoginResponse>(std::bind(&WithStreamedUnaryMethod_Login<BaseClass>::StreamedLogin, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Login(::grpc::ServerContext* context, const ::auth::LoginRequest* request, ::auth::LoginResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::auth::LoginRequest,::auth::LoginResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Logout() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::auth::LogoutRequest, ::auth::LogoutResponse>(std::bind(&WithStreamedUnaryMethod_Logout<BaseClass>::StreamedLogout, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Logout(::grpc::ServerContext* context, const ::auth::LogoutRequest* request, ::auth::LogoutResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogout(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::auth::LogoutRequest,::auth::LogoutResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Validate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Validate() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::auth::ValidationRequest, ::auth::ValidationResponse>(std::bind(&WithStreamedUnaryMethod_Validate<BaseClass>::StreamedValidate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Validate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Validate(::grpc::ServerContext* context, const ::auth::ValidationRequest* request, ::auth::ValidationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedValidate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::auth::ValidationRequest,::auth::ValidationResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_Logout<WithStreamedUnaryMethod_Validate<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_Logout<WithStreamedUnaryMethod_Validate<Service > > > StreamedService;
};

}  // namespace auth


#endif  // GRPC_auth_2eproto__INCLUDED
