// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auth.proto

#include "auth.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_auth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Cookie_auth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_auth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Credentials_auth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_auth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Status_auth_2eproto;
namespace auth {
class CredentialsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Credentials> _instance;
} _Credentials_default_instance_;
class CookieDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Cookie> _instance;
} _Cookie_default_instance_;
class StatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Status> _instance;
} _Status_default_instance_;
class LoginRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginRequest> _instance;
} _LoginRequest_default_instance_;
class LoginResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginResponse> _instance;
} _LoginResponse_default_instance_;
class LogoutRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogoutRequest> _instance;
} _LogoutRequest_default_instance_;
class LogoutResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogoutResponse> _instance;
} _LogoutResponse_default_instance_;
class ValidationRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ValidationRequest> _instance;
} _ValidationRequest_default_instance_;
class ValidationResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ValidationResponse> _instance;
} _ValidationResponse_default_instance_;
}  // namespace auth
static void InitDefaultsCredentials_auth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::auth::_Credentials_default_instance_;
    new (ptr) ::auth::Credentials();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::auth::Credentials::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Credentials_auth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCredentials_auth_2eproto}, {}};

static void InitDefaultsCookie_auth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::auth::_Cookie_default_instance_;
    new (ptr) ::auth::Cookie();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::auth::Cookie::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Cookie_auth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCookie_auth_2eproto}, {}};

static void InitDefaultsStatus_auth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::auth::_Status_default_instance_;
    new (ptr) ::auth::Status();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::auth::Status::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Status_auth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStatus_auth_2eproto}, {}};

static void InitDefaultsLoginRequest_auth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::auth::_LoginRequest_default_instance_;
    new (ptr) ::auth::LoginRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::auth::LoginRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LoginRequest_auth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLoginRequest_auth_2eproto}, {
      &scc_info_Credentials_auth_2eproto.base,}};

static void InitDefaultsLoginResponse_auth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::auth::_LoginResponse_default_instance_;
    new (ptr) ::auth::LoginResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::auth::LoginResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LoginResponse_auth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLoginResponse_auth_2eproto}, {
      &scc_info_Status_auth_2eproto.base,
      &scc_info_Cookie_auth_2eproto.base,}};

static void InitDefaultsLogoutRequest_auth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::auth::_LogoutRequest_default_instance_;
    new (ptr) ::auth::LogoutRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::auth::LogoutRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LogoutRequest_auth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLogoutRequest_auth_2eproto}, {
      &scc_info_Cookie_auth_2eproto.base,}};

static void InitDefaultsLogoutResponse_auth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::auth::_LogoutResponse_default_instance_;
    new (ptr) ::auth::LogoutResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::auth::LogoutResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LogoutResponse_auth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLogoutResponse_auth_2eproto}, {}};

static void InitDefaultsValidationRequest_auth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::auth::_ValidationRequest_default_instance_;
    new (ptr) ::auth::ValidationRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::auth::ValidationRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ValidationRequest_auth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsValidationRequest_auth_2eproto}, {
      &scc_info_Cookie_auth_2eproto.base,}};

static void InitDefaultsValidationResponse_auth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::auth::_ValidationResponse_default_instance_;
    new (ptr) ::auth::ValidationResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::auth::ValidationResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ValidationResponse_auth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsValidationResponse_auth_2eproto}, {
      &scc_info_Status_auth_2eproto.base,}};

void InitDefaults_auth_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Credentials_auth_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Cookie_auth_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Status_auth_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LoginRequest_auth_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LoginResponse_auth_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LogoutRequest_auth_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LogoutResponse_auth_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ValidationRequest_auth_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ValidationResponse_auth_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_auth_2eproto[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_auth_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_auth_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_auth_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::auth::Credentials, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::auth::Credentials, user_name_),
  PROTOBUF_FIELD_OFFSET(::auth::Credentials, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::auth::Cookie, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::auth::Cookie, session_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::auth::Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::auth::Status, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::auth::LoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::auth::LoginRequest, credentials_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::auth::LoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::auth::LoginResponse, status_),
  PROTOBUF_FIELD_OFFSET(::auth::LoginResponse, cookie_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::auth::LogoutRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::auth::LogoutRequest, cookie_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::auth::LogoutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::auth::ValidationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::auth::ValidationRequest, cookie_),
  PROTOBUF_FIELD_OFFSET(::auth::ValidationRequest, resource_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::auth::ValidationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::auth::ValidationResponse, status_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::auth::Credentials)},
  { 7, -1, sizeof(::auth::Cookie)},
  { 13, -1, sizeof(::auth::Status)},
  { 19, -1, sizeof(::auth::LoginRequest)},
  { 25, -1, sizeof(::auth::LoginResponse)},
  { 32, -1, sizeof(::auth::LogoutRequest)},
  { 38, -1, sizeof(::auth::LogoutResponse)},
  { 43, -1, sizeof(::auth::ValidationRequest)},
  { 50, -1, sizeof(::auth::ValidationResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::auth::_Credentials_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::auth::_Cookie_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::auth::_Status_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::auth::_LoginRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::auth::_LoginResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::auth::_LogoutRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::auth::_LogoutResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::auth::_ValidationRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::auth::_ValidationResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_auth_2eproto = {
  {}, AddDescriptors_auth_2eproto, "auth.proto", schemas,
  file_default_instances, TableStruct_auth_2eproto::offsets,
  file_level_metadata_auth_2eproto, 9, file_level_enum_descriptors_auth_2eproto, file_level_service_descriptors_auth_2eproto,
};

const char descriptor_table_protodef_auth_2eproto[] =
  "\n\nauth.proto\022\004auth\"2\n\013Credentials\022\021\n\tuse"
  "r_name\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\"\034\n\006Cookie"
  "\022\022\n\nsession_id\030\001 \001(\t\"n\n\006Status\022\037\n\004code\030\001"
  " \001(\0162\021.auth.Status.Code\"C\n\004Code\022\013\n\007UNKNO"
  "WN\020\000\022\006\n\002OK\020\001\022\021\n\rACCESS_DENIED\020\002\022\023\n\017INVAL"
  "ID_SESSION\020\003\"6\n\014LoginRequest\022&\n\013credenti"
  "als\030\001 \001(\0132\021.auth.Credentials\"K\n\rLoginRes"
  "ponse\022\034\n\006status\030\001 \001(\0132\014.auth.Status\022\034\n\006c"
  "ookie\030\002 \001(\0132\014.auth.Cookie\"-\n\rLogoutReque"
  "st\022\034\n\006cookie\030\001 \001(\0132\014.auth.Cookie\"\020\n\016Logo"
  "utResponse\"C\n\021ValidationRequest\022\034\n\006cooki"
  "e\030\001 \001(\0132\014.auth.Cookie\022\020\n\010resource\030\002 \001(\t\""
  "2\n\022ValidationResponse\022\034\n\006status\030\001 \001(\0132\014."
  "auth.Status2\273\001\n\rAuthenticator\0222\n\005Login\022\022"
  ".auth.LoginRequest\032\023.auth.LoginResponse\""
  "\000\0225\n\006Logout\022\023.auth.LogoutRequest\032\024.auth."
  "LogoutResponse\"\000\022\?\n\010Validate\022\027.auth.Vali"
  "dationRequest\032\030.auth.ValidationResponse\""
  "\000B&Z$github.com/andrei_ilyin/auth-servic"
  "eb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_auth_2eproto = {
  false, InitDefaults_auth_2eproto, 
  descriptor_table_protodef_auth_2eproto,
  "auth.proto", &assign_descriptors_table_auth_2eproto, 769,
};

void AddDescriptors_auth_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_auth_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_auth_2eproto = []() { AddDescriptors_auth_2eproto(); return true; }();
namespace auth {
const ::google::protobuf::EnumDescriptor* Status_Code_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_auth_2eproto);
  return file_level_enum_descriptors_auth_2eproto[0];
}
bool Status_Code_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Status_Code Status::UNKNOWN;
const Status_Code Status::OK;
const Status_Code Status::ACCESS_DENIED;
const Status_Code Status::INVALID_SESSION;
const Status_Code Status::Code_MIN;
const Status_Code Status::Code_MAX;
const int Status::Code_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Credentials::InitAsDefaultInstance() {
}
class Credentials::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Credentials::kUserNameFieldNumber;
const int Credentials::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Credentials::Credentials()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:auth.Credentials)
}
Credentials::Credentials(const Credentials& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_name().size() > 0) {
    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  // @@protoc_insertion_point(copy_constructor:auth.Credentials)
}

void Credentials::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Credentials_auth_2eproto.base);
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Credentials::~Credentials() {
  // @@protoc_insertion_point(destructor:auth.Credentials)
  SharedDtor();
}

void Credentials::SharedDtor() {
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Credentials::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Credentials& Credentials::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Credentials_auth_2eproto.base);
  return *internal_default_instance();
}


void Credentials::Clear() {
// @@protoc_insertion_point(message_clear_start:auth.Credentials)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Credentials::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Credentials*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string user_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("auth.Credentials.user_name");
        object = msg->mutable_user_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string password = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("auth.Credentials.password");
        object = msg->mutable_password();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Credentials::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:auth.Credentials)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string user_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_name().data(), static_cast<int>(this->user_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "auth.Credentials.user_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "auth.Credentials.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:auth.Credentials)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:auth.Credentials)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Credentials::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:auth.Credentials)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_name = 1;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "auth.Credentials.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_name(), output);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "auth.Credentials.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:auth.Credentials)
}

::google::protobuf::uint8* Credentials::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:auth.Credentials)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_name = 1;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "auth.Credentials.user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "auth.Credentials.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:auth.Credentials)
  return target;
}

size_t Credentials::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:auth.Credentials)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_name = 1;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_name());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Credentials::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:auth.Credentials)
  GOOGLE_DCHECK_NE(&from, this);
  const Credentials* source =
      ::google::protobuf::DynamicCastToGenerated<Credentials>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:auth.Credentials)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:auth.Credentials)
    MergeFrom(*source);
  }
}

void Credentials::MergeFrom(const Credentials& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:auth.Credentials)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_name().size() > 0) {

    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void Credentials::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:auth.Credentials)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Credentials::CopyFrom(const Credentials& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:auth.Credentials)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Credentials::IsInitialized() const {
  return true;
}

void Credentials::Swap(Credentials* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Credentials::InternalSwap(Credentials* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_name_.Swap(&other->user_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata Credentials::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_auth_2eproto);
  return ::file_level_metadata_auth_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Cookie::InitAsDefaultInstance() {
}
class Cookie::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Cookie::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Cookie::Cookie()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:auth.Cookie)
}
Cookie::Cookie(const Cookie& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  // @@protoc_insertion_point(copy_constructor:auth.Cookie)
}

void Cookie::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Cookie_auth_2eproto.base);
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Cookie::~Cookie() {
  // @@protoc_insertion_point(destructor:auth.Cookie)
  SharedDtor();
}

void Cookie::SharedDtor() {
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Cookie::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Cookie& Cookie::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Cookie_auth_2eproto.base);
  return *internal_default_instance();
}


void Cookie::Clear() {
// @@protoc_insertion_point(message_clear_start:auth.Cookie)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Cookie::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Cookie*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string session_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("auth.Cookie.session_id");
        object = msg->mutable_session_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Cookie::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:auth.Cookie)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string session_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "auth.Cookie.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:auth.Cookie)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:auth.Cookie)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Cookie::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:auth.Cookie)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_id = 1;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "auth.Cookie.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:auth.Cookie)
}

::google::protobuf::uint8* Cookie::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:auth.Cookie)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_id = 1;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "auth.Cookie.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:auth.Cookie)
  return target;
}

size_t Cookie::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:auth.Cookie)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_id = 1;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Cookie::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:auth.Cookie)
  GOOGLE_DCHECK_NE(&from, this);
  const Cookie* source =
      ::google::protobuf::DynamicCastToGenerated<Cookie>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:auth.Cookie)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:auth.Cookie)
    MergeFrom(*source);
  }
}

void Cookie::MergeFrom(const Cookie& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:auth.Cookie)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
}

void Cookie::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:auth.Cookie)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cookie::CopyFrom(const Cookie& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:auth.Cookie)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cookie::IsInitialized() const {
  return true;
}

void Cookie::Swap(Cookie* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cookie::InternalSwap(Cookie* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  session_id_.Swap(&other->session_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata Cookie::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_auth_2eproto);
  return ::file_level_metadata_auth_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Status::InitAsDefaultInstance() {
}
class Status::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Status::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Status::Status()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:auth.Status)
}
Status::Status(const Status& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:auth.Status)
}

void Status::SharedCtor() {
  code_ = 0;
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:auth.Status)
  SharedDtor();
}

void Status::SharedDtor() {
}

void Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Status& Status::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Status_auth_2eproto.base);
  return *internal_default_instance();
}


void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:auth.Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Status::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Status*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .auth.Status.Code code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_code(static_cast<::auth::Status_Code>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:auth.Status)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .auth.Status.Code code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_code(static_cast< ::auth::Status_Code >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:auth.Status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:auth.Status)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:auth.Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .auth.Status.Code code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:auth.Status)
}

::google::protobuf::uint8* Status::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:auth.Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .auth.Status.Code code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:auth.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:auth.Status)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .auth.Status.Code code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Status::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:auth.Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Status* source =
      ::google::protobuf::DynamicCastToGenerated<Status>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:auth.Status)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:auth.Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:auth.Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code() != 0) {
    set_code(from.code());
  }
}

void Status::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:auth.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:auth.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::Swap(Status* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Status::InternalSwap(Status* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(code_, other->code_);
}

::google::protobuf::Metadata Status::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_auth_2eproto);
  return ::file_level_metadata_auth_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LoginRequest::InitAsDefaultInstance() {
  ::auth::_LoginRequest_default_instance_._instance.get_mutable()->credentials_ = const_cast< ::auth::Credentials*>(
      ::auth::Credentials::internal_default_instance());
}
class LoginRequest::HasBitSetters {
 public:
  static const ::auth::Credentials& credentials(const LoginRequest* msg);
};

const ::auth::Credentials&
LoginRequest::HasBitSetters::credentials(const LoginRequest* msg) {
  return *msg->credentials_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRequest::kCredentialsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRequest::LoginRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:auth.LoginRequest)
}
LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_credentials()) {
    credentials_ = new ::auth::Credentials(*from.credentials_);
  } else {
    credentials_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:auth.LoginRequest)
}

void LoginRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LoginRequest_auth_2eproto.base);
  credentials_ = nullptr;
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:auth.LoginRequest)
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  if (this != internal_default_instance()) delete credentials_;
}

void LoginRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginRequest& LoginRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LoginRequest_auth_2eproto.base);
  return *internal_default_instance();
}


void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:auth.LoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && credentials_ != nullptr) {
    delete credentials_;
  }
  credentials_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LoginRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LoginRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .auth.Credentials credentials = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::auth::Credentials::_InternalParse;
        object = msg->mutable_credentials();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:auth.LoginRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .auth.Credentials credentials = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_credentials()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:auth.LoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:auth.LoginRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:auth.LoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .auth.Credentials credentials = 1;
  if (this->has_credentials()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::credentials(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:auth.LoginRequest)
}

::google::protobuf::uint8* LoginRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:auth.LoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .auth.Credentials credentials = 1;
  if (this->has_credentials()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::credentials(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:auth.LoginRequest)
  return target;
}

size_t LoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:auth.LoginRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .auth.Credentials credentials = 1;
  if (this->has_credentials()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *credentials_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:auth.LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRequest* source =
      ::google::protobuf::DynamicCastToGenerated<LoginRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:auth.LoginRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:auth.LoginRequest)
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:auth.LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_credentials()) {
    mutable_credentials()->::auth::Credentials::MergeFrom(from.credentials());
  }
}

void LoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:auth.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:auth.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRequest::InternalSwap(LoginRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(credentials_, other->credentials_);
}

::google::protobuf::Metadata LoginRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_auth_2eproto);
  return ::file_level_metadata_auth_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LoginResponse::InitAsDefaultInstance() {
  ::auth::_LoginResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::auth::Status*>(
      ::auth::Status::internal_default_instance());
  ::auth::_LoginResponse_default_instance_._instance.get_mutable()->cookie_ = const_cast< ::auth::Cookie*>(
      ::auth::Cookie::internal_default_instance());
}
class LoginResponse::HasBitSetters {
 public:
  static const ::auth::Status& status(const LoginResponse* msg);
  static const ::auth::Cookie& cookie(const LoginResponse* msg);
};

const ::auth::Status&
LoginResponse::HasBitSetters::status(const LoginResponse* msg) {
  return *msg->status_;
}
const ::auth::Cookie&
LoginResponse::HasBitSetters::cookie(const LoginResponse* msg) {
  return *msg->cookie_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginResponse::kStatusFieldNumber;
const int LoginResponse::kCookieFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginResponse::LoginResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:auth.LoginResponse)
}
LoginResponse::LoginResponse(const LoginResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::auth::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from.has_cookie()) {
    cookie_ = new ::auth::Cookie(*from.cookie_);
  } else {
    cookie_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:auth.LoginResponse)
}

void LoginResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LoginResponse_auth_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cookie_) -
      reinterpret_cast<char*>(&status_)) + sizeof(cookie_));
}

LoginResponse::~LoginResponse() {
  // @@protoc_insertion_point(destructor:auth.LoginResponse)
  SharedDtor();
}

void LoginResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete cookie_;
}

void LoginResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginResponse& LoginResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LoginResponse_auth_2eproto.base);
  return *internal_default_instance();
}


void LoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:auth.LoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && cookie_ != nullptr) {
    delete cookie_;
  }
  cookie_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LoginResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LoginResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .auth.Status status = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::auth::Status::_InternalParse;
        object = msg->mutable_status();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .auth.Cookie cookie = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::auth::Cookie::_InternalParse;
        object = msg->mutable_cookie();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:auth.LoginResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .auth.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .auth.Cookie cookie = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cookie()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:auth.LoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:auth.LoginResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:auth.LoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .auth.Status status = 1;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::status(this), output);
  }

  // .auth.Cookie cookie = 2;
  if (this->has_cookie()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::cookie(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:auth.LoginResponse)
}

::google::protobuf::uint8* LoginResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:auth.LoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .auth.Status status = 1;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::status(this), target);
  }

  // .auth.Cookie cookie = 2;
  if (this->has_cookie()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::cookie(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:auth.LoginResponse)
  return target;
}

size_t LoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:auth.LoginResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .auth.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .auth.Cookie cookie = 2;
  if (this->has_cookie()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cookie_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:auth.LoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginResponse* source =
      ::google::protobuf::DynamicCastToGenerated<LoginResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:auth.LoginResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:auth.LoginResponse)
    MergeFrom(*source);
  }
}

void LoginResponse::MergeFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:auth.LoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    mutable_status()->::auth::Status::MergeFrom(from.status());
  }
  if (from.has_cookie()) {
    mutable_cookie()->::auth::Cookie::MergeFrom(from.cookie());
  }
}

void LoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:auth.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:auth.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {
  return true;
}

void LoginResponse::Swap(LoginResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginResponse::InternalSwap(LoginResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(cookie_, other->cookie_);
}

::google::protobuf::Metadata LoginResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_auth_2eproto);
  return ::file_level_metadata_auth_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LogoutRequest::InitAsDefaultInstance() {
  ::auth::_LogoutRequest_default_instance_._instance.get_mutable()->cookie_ = const_cast< ::auth::Cookie*>(
      ::auth::Cookie::internal_default_instance());
}
class LogoutRequest::HasBitSetters {
 public:
  static const ::auth::Cookie& cookie(const LogoutRequest* msg);
};

const ::auth::Cookie&
LogoutRequest::HasBitSetters::cookie(const LogoutRequest* msg) {
  return *msg->cookie_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogoutRequest::kCookieFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogoutRequest::LogoutRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:auth.LogoutRequest)
}
LogoutRequest::LogoutRequest(const LogoutRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cookie()) {
    cookie_ = new ::auth::Cookie(*from.cookie_);
  } else {
    cookie_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:auth.LogoutRequest)
}

void LogoutRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LogoutRequest_auth_2eproto.base);
  cookie_ = nullptr;
}

LogoutRequest::~LogoutRequest() {
  // @@protoc_insertion_point(destructor:auth.LogoutRequest)
  SharedDtor();
}

void LogoutRequest::SharedDtor() {
  if (this != internal_default_instance()) delete cookie_;
}

void LogoutRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogoutRequest& LogoutRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LogoutRequest_auth_2eproto.base);
  return *internal_default_instance();
}


void LogoutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:auth.LogoutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && cookie_ != nullptr) {
    delete cookie_;
  }
  cookie_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LogoutRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LogoutRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .auth.Cookie cookie = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::auth::Cookie::_InternalParse;
        object = msg->mutable_cookie();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LogoutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:auth.LogoutRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .auth.Cookie cookie = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cookie()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:auth.LogoutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:auth.LogoutRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LogoutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:auth.LogoutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .auth.Cookie cookie = 1;
  if (this->has_cookie()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::cookie(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:auth.LogoutRequest)
}

::google::protobuf::uint8* LogoutRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:auth.LogoutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .auth.Cookie cookie = 1;
  if (this->has_cookie()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::cookie(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:auth.LogoutRequest)
  return target;
}

size_t LogoutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:auth.LogoutRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .auth.Cookie cookie = 1;
  if (this->has_cookie()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cookie_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogoutRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:auth.LogoutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LogoutRequest* source =
      ::google::protobuf::DynamicCastToGenerated<LogoutRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:auth.LogoutRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:auth.LogoutRequest)
    MergeFrom(*source);
  }
}

void LogoutRequest::MergeFrom(const LogoutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:auth.LogoutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cookie()) {
    mutable_cookie()->::auth::Cookie::MergeFrom(from.cookie());
  }
}

void LogoutRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:auth.LogoutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutRequest::CopyFrom(const LogoutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:auth.LogoutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutRequest::IsInitialized() const {
  return true;
}

void LogoutRequest::Swap(LogoutRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogoutRequest::InternalSwap(LogoutRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(cookie_, other->cookie_);
}

::google::protobuf::Metadata LogoutRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_auth_2eproto);
  return ::file_level_metadata_auth_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LogoutResponse::InitAsDefaultInstance() {
}
class LogoutResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogoutResponse::LogoutResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:auth.LogoutResponse)
}
LogoutResponse::LogoutResponse(const LogoutResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:auth.LogoutResponse)
}

void LogoutResponse::SharedCtor() {
}

LogoutResponse::~LogoutResponse() {
  // @@protoc_insertion_point(destructor:auth.LogoutResponse)
  SharedDtor();
}

void LogoutResponse::SharedDtor() {
}

void LogoutResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogoutResponse& LogoutResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LogoutResponse_auth_2eproto.base);
  return *internal_default_instance();
}


void LogoutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:auth.LogoutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LogoutResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LogoutResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LogoutResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:auth.LogoutResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:auth.LogoutResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:auth.LogoutResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LogoutResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:auth.LogoutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:auth.LogoutResponse)
}

::google::protobuf::uint8* LogoutResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:auth.LogoutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:auth.LogoutResponse)
  return target;
}

size_t LogoutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:auth.LogoutResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogoutResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:auth.LogoutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LogoutResponse* source =
      ::google::protobuf::DynamicCastToGenerated<LogoutResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:auth.LogoutResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:auth.LogoutResponse)
    MergeFrom(*source);
  }
}

void LogoutResponse::MergeFrom(const LogoutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:auth.LogoutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LogoutResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:auth.LogoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutResponse::CopyFrom(const LogoutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:auth.LogoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutResponse::IsInitialized() const {
  return true;
}

void LogoutResponse::Swap(LogoutResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogoutResponse::InternalSwap(LogoutResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LogoutResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_auth_2eproto);
  return ::file_level_metadata_auth_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ValidationRequest::InitAsDefaultInstance() {
  ::auth::_ValidationRequest_default_instance_._instance.get_mutable()->cookie_ = const_cast< ::auth::Cookie*>(
      ::auth::Cookie::internal_default_instance());
}
class ValidationRequest::HasBitSetters {
 public:
  static const ::auth::Cookie& cookie(const ValidationRequest* msg);
};

const ::auth::Cookie&
ValidationRequest::HasBitSetters::cookie(const ValidationRequest* msg) {
  return *msg->cookie_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ValidationRequest::kCookieFieldNumber;
const int ValidationRequest::kResourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ValidationRequest::ValidationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:auth.ValidationRequest)
}
ValidationRequest::ValidationRequest(const ValidationRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  resource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.resource().size() > 0) {
    resource_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resource_);
  }
  if (from.has_cookie()) {
    cookie_ = new ::auth::Cookie(*from.cookie_);
  } else {
    cookie_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:auth.ValidationRequest)
}

void ValidationRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ValidationRequest_auth_2eproto.base);
  resource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cookie_ = nullptr;
}

ValidationRequest::~ValidationRequest() {
  // @@protoc_insertion_point(destructor:auth.ValidationRequest)
  SharedDtor();
}

void ValidationRequest::SharedDtor() {
  resource_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cookie_;
}

void ValidationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidationRequest& ValidationRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ValidationRequest_auth_2eproto.base);
  return *internal_default_instance();
}


void ValidationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:auth.ValidationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && cookie_ != nullptr) {
    delete cookie_;
  }
  cookie_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ValidationRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ValidationRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .auth.Cookie cookie = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::auth::Cookie::_InternalParse;
        object = msg->mutable_cookie();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string resource = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("auth.ValidationRequest.resource");
        object = msg->mutable_resource();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ValidationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:auth.ValidationRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .auth.Cookie cookie = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cookie()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string resource = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->resource().data(), static_cast<int>(this->resource().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "auth.ValidationRequest.resource"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:auth.ValidationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:auth.ValidationRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ValidationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:auth.ValidationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .auth.Cookie cookie = 1;
  if (this->has_cookie()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::cookie(this), output);
  }

  // string resource = 2;
  if (this->resource().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resource().data(), static_cast<int>(this->resource().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "auth.ValidationRequest.resource");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->resource(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:auth.ValidationRequest)
}

::google::protobuf::uint8* ValidationRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:auth.ValidationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .auth.Cookie cookie = 1;
  if (this->has_cookie()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::cookie(this), target);
  }

  // string resource = 2;
  if (this->resource().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resource().data(), static_cast<int>(this->resource().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "auth.ValidationRequest.resource");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resource(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:auth.ValidationRequest)
  return target;
}

size_t ValidationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:auth.ValidationRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string resource = 2;
  if (this->resource().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->resource());
  }

  // .auth.Cookie cookie = 1;
  if (this->has_cookie()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cookie_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:auth.ValidationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidationRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ValidationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:auth.ValidationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:auth.ValidationRequest)
    MergeFrom(*source);
  }
}

void ValidationRequest::MergeFrom(const ValidationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:auth.ValidationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.resource().size() > 0) {

    resource_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resource_);
  }
  if (from.has_cookie()) {
    mutable_cookie()->::auth::Cookie::MergeFrom(from.cookie());
  }
}

void ValidationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:auth.ValidationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidationRequest::CopyFrom(const ValidationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:auth.ValidationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidationRequest::IsInitialized() const {
  return true;
}

void ValidationRequest::Swap(ValidationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ValidationRequest::InternalSwap(ValidationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  resource_.Swap(&other->resource_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cookie_, other->cookie_);
}

::google::protobuf::Metadata ValidationRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_auth_2eproto);
  return ::file_level_metadata_auth_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ValidationResponse::InitAsDefaultInstance() {
  ::auth::_ValidationResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::auth::Status*>(
      ::auth::Status::internal_default_instance());
}
class ValidationResponse::HasBitSetters {
 public:
  static const ::auth::Status& status(const ValidationResponse* msg);
};

const ::auth::Status&
ValidationResponse::HasBitSetters::status(const ValidationResponse* msg) {
  return *msg->status_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ValidationResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ValidationResponse::ValidationResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:auth.ValidationResponse)
}
ValidationResponse::ValidationResponse(const ValidationResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::auth::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:auth.ValidationResponse)
}

void ValidationResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ValidationResponse_auth_2eproto.base);
  status_ = nullptr;
}

ValidationResponse::~ValidationResponse() {
  // @@protoc_insertion_point(destructor:auth.ValidationResponse)
  SharedDtor();
}

void ValidationResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void ValidationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidationResponse& ValidationResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ValidationResponse_auth_2eproto.base);
  return *internal_default_instance();
}


void ValidationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:auth.ValidationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ValidationResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ValidationResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .auth.Status status = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::auth::Status::_InternalParse;
        object = msg->mutable_status();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ValidationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:auth.ValidationResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .auth.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:auth.ValidationResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:auth.ValidationResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ValidationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:auth.ValidationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .auth.Status status = 1;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::status(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:auth.ValidationResponse)
}

::google::protobuf::uint8* ValidationResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:auth.ValidationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .auth.Status status = 1;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::status(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:auth.ValidationResponse)
  return target;
}

size_t ValidationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:auth.ValidationResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .auth.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *status_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidationResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:auth.ValidationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidationResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ValidationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:auth.ValidationResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:auth.ValidationResponse)
    MergeFrom(*source);
  }
}

void ValidationResponse::MergeFrom(const ValidationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:auth.ValidationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    mutable_status()->::auth::Status::MergeFrom(from.status());
  }
}

void ValidationResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:auth.ValidationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidationResponse::CopyFrom(const ValidationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:auth.ValidationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidationResponse::IsInitialized() const {
  return true;
}

void ValidationResponse::Swap(ValidationResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ValidationResponse::InternalSwap(ValidationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::google::protobuf::Metadata ValidationResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_auth_2eproto);
  return ::file_level_metadata_auth_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace auth
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::auth::Credentials* Arena::CreateMaybeMessage< ::auth::Credentials >(Arena* arena) {
  return Arena::CreateInternal< ::auth::Credentials >(arena);
}
template<> PROTOBUF_NOINLINE ::auth::Cookie* Arena::CreateMaybeMessage< ::auth::Cookie >(Arena* arena) {
  return Arena::CreateInternal< ::auth::Cookie >(arena);
}
template<> PROTOBUF_NOINLINE ::auth::Status* Arena::CreateMaybeMessage< ::auth::Status >(Arena* arena) {
  return Arena::CreateInternal< ::auth::Status >(arena);
}
template<> PROTOBUF_NOINLINE ::auth::LoginRequest* Arena::CreateMaybeMessage< ::auth::LoginRequest >(Arena* arena) {
  return Arena::CreateInternal< ::auth::LoginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::auth::LoginResponse* Arena::CreateMaybeMessage< ::auth::LoginResponse >(Arena* arena) {
  return Arena::CreateInternal< ::auth::LoginResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::auth::LogoutRequest* Arena::CreateMaybeMessage< ::auth::LogoutRequest >(Arena* arena) {
  return Arena::CreateInternal< ::auth::LogoutRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::auth::LogoutResponse* Arena::CreateMaybeMessage< ::auth::LogoutResponse >(Arena* arena) {
  return Arena::CreateInternal< ::auth::LogoutResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::auth::ValidationRequest* Arena::CreateMaybeMessage< ::auth::ValidationRequest >(Arena* arena) {
  return Arena::CreateInternal< ::auth::ValidationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::auth::ValidationResponse* Arena::CreateMaybeMessage< ::auth::ValidationResponse >(Arena* arena) {
  return Arena::CreateInternal< ::auth::ValidationResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
