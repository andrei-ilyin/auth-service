// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auth.proto

#ifndef PROTOBUF_INCLUDED_auth_2eproto
#define PROTOBUF_INCLUDED_auth_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_auth_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_auth_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_auth_2eproto();
namespace auth {
class Cookie;
class CookieDefaultTypeInternal;
extern CookieDefaultTypeInternal _Cookie_default_instance_;
class Credentials;
class CredentialsDefaultTypeInternal;
extern CredentialsDefaultTypeInternal _Credentials_default_instance_;
class LoginRequest;
class LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class LoginResponse;
class LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
class LogoutRequest;
class LogoutRequestDefaultTypeInternal;
extern LogoutRequestDefaultTypeInternal _LogoutRequest_default_instance_;
class LogoutResponse;
class LogoutResponseDefaultTypeInternal;
extern LogoutResponseDefaultTypeInternal _LogoutResponse_default_instance_;
class Status;
class StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
class ValidationRequest;
class ValidationRequestDefaultTypeInternal;
extern ValidationRequestDefaultTypeInternal _ValidationRequest_default_instance_;
class ValidationResponse;
class ValidationResponseDefaultTypeInternal;
extern ValidationResponseDefaultTypeInternal _ValidationResponse_default_instance_;
}  // namespace auth
namespace google {
namespace protobuf {
template<> ::auth::Cookie* Arena::CreateMaybeMessage<::auth::Cookie>(Arena*);
template<> ::auth::Credentials* Arena::CreateMaybeMessage<::auth::Credentials>(Arena*);
template<> ::auth::LoginRequest* Arena::CreateMaybeMessage<::auth::LoginRequest>(Arena*);
template<> ::auth::LoginResponse* Arena::CreateMaybeMessage<::auth::LoginResponse>(Arena*);
template<> ::auth::LogoutRequest* Arena::CreateMaybeMessage<::auth::LogoutRequest>(Arena*);
template<> ::auth::LogoutResponse* Arena::CreateMaybeMessage<::auth::LogoutResponse>(Arena*);
template<> ::auth::Status* Arena::CreateMaybeMessage<::auth::Status>(Arena*);
template<> ::auth::ValidationRequest* Arena::CreateMaybeMessage<::auth::ValidationRequest>(Arena*);
template<> ::auth::ValidationResponse* Arena::CreateMaybeMessage<::auth::ValidationResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace auth {

enum Status_Code {
  Status_Code_UNKNOWN = 0,
  Status_Code_OK = 1,
  Status_Code_ACCESS_DENIED = 2,
  Status_Code_INVALID_SESSION = 3,
  Status_Code_Status_Code_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Status_Code_Status_Code_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Status_Code_IsValid(int value);
const Status_Code Status_Code_Code_MIN = Status_Code_UNKNOWN;
const Status_Code Status_Code_Code_MAX = Status_Code_INVALID_SESSION;
const int Status_Code_Code_ARRAYSIZE = Status_Code_Code_MAX + 1;

const ::google::protobuf::EnumDescriptor* Status_Code_descriptor();
inline const ::std::string& Status_Code_Name(Status_Code value) {
  return ::google::protobuf::internal::NameOfEnum(
    Status_Code_descriptor(), value);
}
inline bool Status_Code_Parse(
    const ::std::string& name, Status_Code* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Status_Code>(
    Status_Code_descriptor(), name, value);
}
// ===================================================================

class Credentials final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:auth.Credentials) */ {
 public:
  Credentials();
  virtual ~Credentials();

  Credentials(const Credentials& from);

  inline Credentials& operator=(const Credentials& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Credentials(Credentials&& from) noexcept
    : Credentials() {
    *this = ::std::move(from);
  }

  inline Credentials& operator=(Credentials&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Credentials& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Credentials* internal_default_instance() {
    return reinterpret_cast<const Credentials*>(
               &_Credentials_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Credentials* other);
  friend void swap(Credentials& a, Credentials& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Credentials* New() const final {
    return CreateMaybeMessage<Credentials>(nullptr);
  }

  Credentials* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Credentials>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Credentials& from);
  void MergeFrom(const Credentials& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Credentials* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user_name = 1;
  void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& user_name() const;
  void set_user_name(const ::std::string& value);
  #if LANG_CXX11
  void set_user_name(::std::string&& value);
  #endif
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  ::std::string* mutable_user_name();
  ::std::string* release_user_name();
  void set_allocated_user_name(::std::string* user_name);

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:auth.Credentials)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_name_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class Cookie final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:auth.Cookie) */ {
 public:
  Cookie();
  virtual ~Cookie();

  Cookie(const Cookie& from);

  inline Cookie& operator=(const Cookie& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Cookie(Cookie&& from) noexcept
    : Cookie() {
    *this = ::std::move(from);
  }

  inline Cookie& operator=(Cookie&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Cookie& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cookie* internal_default_instance() {
    return reinterpret_cast<const Cookie*>(
               &_Cookie_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Cookie* other);
  friend void swap(Cookie& a, Cookie& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Cookie* New() const final {
    return CreateMaybeMessage<Cookie>(nullptr);
  }

  Cookie* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Cookie>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Cookie& from);
  void MergeFrom(const Cookie& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cookie* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string session_id = 1;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // @@protoc_insertion_point(class_scope:auth.Cookie)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class Status final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:auth.Status) */ {
 public:
  Status();
  virtual ~Status();

  Status(const Status& from);

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(Status&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Status& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Status* other);
  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const final {
    return CreateMaybeMessage<Status>(nullptr);
  }

  Status* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Status_Code Code;
  static const Code UNKNOWN =
    Status_Code_UNKNOWN;
  static const Code OK =
    Status_Code_OK;
  static const Code ACCESS_DENIED =
    Status_Code_ACCESS_DENIED;
  static const Code INVALID_SESSION =
    Status_Code_INVALID_SESSION;
  static inline bool Code_IsValid(int value) {
    return Status_Code_IsValid(value);
  }
  static const Code Code_MIN =
    Status_Code_Code_MIN;
  static const Code Code_MAX =
    Status_Code_Code_MAX;
  static const int Code_ARRAYSIZE =
    Status_Code_Code_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Code_descriptor() {
    return Status_Code_descriptor();
  }
  static inline const ::std::string& Code_Name(Code value) {
    return Status_Code_Name(value);
  }
  static inline bool Code_Parse(const ::std::string& name,
      Code* value) {
    return Status_Code_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .auth.Status.Code code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::auth::Status_Code code() const;
  void set_code(::auth::Status_Code value);

  // @@protoc_insertion_point(class_scope:auth.Status)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class LoginRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:auth.LoginRequest) */ {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(LoginRequest* other);
  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const final {
    return CreateMaybeMessage<LoginRequest>(nullptr);
  }

  LoginRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .auth.Credentials credentials = 1;
  bool has_credentials() const;
  void clear_credentials();
  static const int kCredentialsFieldNumber = 1;
  const ::auth::Credentials& credentials() const;
  ::auth::Credentials* release_credentials();
  ::auth::Credentials* mutable_credentials();
  void set_allocated_credentials(::auth::Credentials* credentials);

  // @@protoc_insertion_point(class_scope:auth.LoginRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::auth::Credentials* credentials_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class LoginResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:auth.LoginResponse) */ {
 public:
  LoginResponse();
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginResponse(LoginResponse&& from) noexcept
    : LoginResponse() {
    *this = ::std::move(from);
  }

  inline LoginResponse& operator=(LoginResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LoginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
               &_LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(LoginResponse* other);
  friend void swap(LoginResponse& a, LoginResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginResponse* New() const final {
    return CreateMaybeMessage<LoginResponse>(nullptr);
  }

  LoginResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoginResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .auth.Status status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::auth::Status& status() const;
  ::auth::Status* release_status();
  ::auth::Status* mutable_status();
  void set_allocated_status(::auth::Status* status);

  // .auth.Cookie cookie = 2;
  bool has_cookie() const;
  void clear_cookie();
  static const int kCookieFieldNumber = 2;
  const ::auth::Cookie& cookie() const;
  ::auth::Cookie* release_cookie();
  ::auth::Cookie* mutable_cookie();
  void set_allocated_cookie(::auth::Cookie* cookie);

  // @@protoc_insertion_point(class_scope:auth.LoginResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::auth::Status* status_;
  ::auth::Cookie* cookie_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class LogoutRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:auth.LogoutRequest) */ {
 public:
  LogoutRequest();
  virtual ~LogoutRequest();

  LogoutRequest(const LogoutRequest& from);

  inline LogoutRequest& operator=(const LogoutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogoutRequest(LogoutRequest&& from) noexcept
    : LogoutRequest() {
    *this = ::std::move(from);
  }

  inline LogoutRequest& operator=(LogoutRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LogoutRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogoutRequest* internal_default_instance() {
    return reinterpret_cast<const LogoutRequest*>(
               &_LogoutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(LogoutRequest* other);
  friend void swap(LogoutRequest& a, LogoutRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogoutRequest* New() const final {
    return CreateMaybeMessage<LogoutRequest>(nullptr);
  }

  LogoutRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogoutRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogoutRequest& from);
  void MergeFrom(const LogoutRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogoutRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .auth.Cookie cookie = 1;
  bool has_cookie() const;
  void clear_cookie();
  static const int kCookieFieldNumber = 1;
  const ::auth::Cookie& cookie() const;
  ::auth::Cookie* release_cookie();
  ::auth::Cookie* mutable_cookie();
  void set_allocated_cookie(::auth::Cookie* cookie);

  // @@protoc_insertion_point(class_scope:auth.LogoutRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::auth::Cookie* cookie_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class LogoutResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:auth.LogoutResponse) */ {
 public:
  LogoutResponse();
  virtual ~LogoutResponse();

  LogoutResponse(const LogoutResponse& from);

  inline LogoutResponse& operator=(const LogoutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogoutResponse(LogoutResponse&& from) noexcept
    : LogoutResponse() {
    *this = ::std::move(from);
  }

  inline LogoutResponse& operator=(LogoutResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LogoutResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogoutResponse* internal_default_instance() {
    return reinterpret_cast<const LogoutResponse*>(
               &_LogoutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(LogoutResponse* other);
  friend void swap(LogoutResponse& a, LogoutResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogoutResponse* New() const final {
    return CreateMaybeMessage<LogoutResponse>(nullptr);
  }

  LogoutResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogoutResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogoutResponse& from);
  void MergeFrom(const LogoutResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogoutResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:auth.LogoutResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class ValidationRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:auth.ValidationRequest) */ {
 public:
  ValidationRequest();
  virtual ~ValidationRequest();

  ValidationRequest(const ValidationRequest& from);

  inline ValidationRequest& operator=(const ValidationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValidationRequest(ValidationRequest&& from) noexcept
    : ValidationRequest() {
    *this = ::std::move(from);
  }

  inline ValidationRequest& operator=(ValidationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ValidationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValidationRequest* internal_default_instance() {
    return reinterpret_cast<const ValidationRequest*>(
               &_ValidationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ValidationRequest* other);
  friend void swap(ValidationRequest& a, ValidationRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValidationRequest* New() const final {
    return CreateMaybeMessage<ValidationRequest>(nullptr);
  }

  ValidationRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValidationRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValidationRequest& from);
  void MergeFrom(const ValidationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidationRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string resource = 2;
  void clear_resource();
  static const int kResourceFieldNumber = 2;
  const ::std::string& resource() const;
  void set_resource(const ::std::string& value);
  #if LANG_CXX11
  void set_resource(::std::string&& value);
  #endif
  void set_resource(const char* value);
  void set_resource(const char* value, size_t size);
  ::std::string* mutable_resource();
  ::std::string* release_resource();
  void set_allocated_resource(::std::string* resource);

  // .auth.Cookie cookie = 1;
  bool has_cookie() const;
  void clear_cookie();
  static const int kCookieFieldNumber = 1;
  const ::auth::Cookie& cookie() const;
  ::auth::Cookie* release_cookie();
  ::auth::Cookie* mutable_cookie();
  void set_allocated_cookie(::auth::Cookie* cookie);

  // @@protoc_insertion_point(class_scope:auth.ValidationRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr resource_;
  ::auth::Cookie* cookie_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class ValidationResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:auth.ValidationResponse) */ {
 public:
  ValidationResponse();
  virtual ~ValidationResponse();

  ValidationResponse(const ValidationResponse& from);

  inline ValidationResponse& operator=(const ValidationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValidationResponse(ValidationResponse&& from) noexcept
    : ValidationResponse() {
    *this = ::std::move(from);
  }

  inline ValidationResponse& operator=(ValidationResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ValidationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValidationResponse* internal_default_instance() {
    return reinterpret_cast<const ValidationResponse*>(
               &_ValidationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ValidationResponse* other);
  friend void swap(ValidationResponse& a, ValidationResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValidationResponse* New() const final {
    return CreateMaybeMessage<ValidationResponse>(nullptr);
  }

  ValidationResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValidationResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValidationResponse& from);
  void MergeFrom(const ValidationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidationResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .auth.Status status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::auth::Status& status() const;
  ::auth::Status* release_status();
  ::auth::Status* mutable_status();
  void set_allocated_status(::auth::Status* status);

  // @@protoc_insertion_point(class_scope:auth.ValidationResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::auth::Status* status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_auth_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Credentials

// string user_name = 1;
inline void Credentials::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Credentials::user_name() const {
  // @@protoc_insertion_point(field_get:auth.Credentials.user_name)
  return user_name_.GetNoArena();
}
inline void Credentials::set_user_name(const ::std::string& value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:auth.Credentials.user_name)
}
#if LANG_CXX11
inline void Credentials::set_user_name(::std::string&& value) {
  
  user_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:auth.Credentials.user_name)
}
#endif
inline void Credentials::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:auth.Credentials.user_name)
}
inline void Credentials::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:auth.Credentials.user_name)
}
inline ::std::string* Credentials::mutable_user_name() {
  
  // @@protoc_insertion_point(field_mutable:auth.Credentials.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Credentials::release_user_name() {
  // @@protoc_insertion_point(field_release:auth.Credentials.user_name)
  
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Credentials::set_allocated_user_name(::std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:auth.Credentials.user_name)
}

// string password = 2;
inline void Credentials::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Credentials::password() const {
  // @@protoc_insertion_point(field_get:auth.Credentials.password)
  return password_.GetNoArena();
}
inline void Credentials::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:auth.Credentials.password)
}
#if LANG_CXX11
inline void Credentials::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:auth.Credentials.password)
}
#endif
inline void Credentials::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:auth.Credentials.password)
}
inline void Credentials::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:auth.Credentials.password)
}
inline ::std::string* Credentials::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:auth.Credentials.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Credentials::release_password() {
  // @@protoc_insertion_point(field_release:auth.Credentials.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Credentials::set_allocated_password(::std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:auth.Credentials.password)
}

// -------------------------------------------------------------------

// Cookie

// string session_id = 1;
inline void Cookie::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cookie::session_id() const {
  // @@protoc_insertion_point(field_get:auth.Cookie.session_id)
  return session_id_.GetNoArena();
}
inline void Cookie::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:auth.Cookie.session_id)
}
#if LANG_CXX11
inline void Cookie::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:auth.Cookie.session_id)
}
#endif
inline void Cookie::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:auth.Cookie.session_id)
}
inline void Cookie::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:auth.Cookie.session_id)
}
inline ::std::string* Cookie::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:auth.Cookie.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cookie::release_session_id() {
  // @@protoc_insertion_point(field_release:auth.Cookie.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cookie::set_allocated_session_id(::std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:auth.Cookie.session_id)
}

// -------------------------------------------------------------------

// Status

// .auth.Status.Code code = 1;
inline void Status::clear_code() {
  code_ = 0;
}
inline ::auth::Status_Code Status::code() const {
  // @@protoc_insertion_point(field_get:auth.Status.code)
  return static_cast< ::auth::Status_Code >(code_);
}
inline void Status::set_code(::auth::Status_Code value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:auth.Status.code)
}

// -------------------------------------------------------------------

// LoginRequest

// .auth.Credentials credentials = 1;
inline bool LoginRequest::has_credentials() const {
  return this != internal_default_instance() && credentials_ != nullptr;
}
inline void LoginRequest::clear_credentials() {
  if (GetArenaNoVirtual() == nullptr && credentials_ != nullptr) {
    delete credentials_;
  }
  credentials_ = nullptr;
}
inline const ::auth::Credentials& LoginRequest::credentials() const {
  const ::auth::Credentials* p = credentials_;
  // @@protoc_insertion_point(field_get:auth.LoginRequest.credentials)
  return p != nullptr ? *p : *reinterpret_cast<const ::auth::Credentials*>(
      &::auth::_Credentials_default_instance_);
}
inline ::auth::Credentials* LoginRequest::release_credentials() {
  // @@protoc_insertion_point(field_release:auth.LoginRequest.credentials)
  
  ::auth::Credentials* temp = credentials_;
  credentials_ = nullptr;
  return temp;
}
inline ::auth::Credentials* LoginRequest::mutable_credentials() {
  
  if (credentials_ == nullptr) {
    auto* p = CreateMaybeMessage<::auth::Credentials>(GetArenaNoVirtual());
    credentials_ = p;
  }
  // @@protoc_insertion_point(field_mutable:auth.LoginRequest.credentials)
  return credentials_;
}
inline void LoginRequest::set_allocated_credentials(::auth::Credentials* credentials) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete credentials_;
  }
  if (credentials) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      credentials = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, credentials, submessage_arena);
    }
    
  } else {
    
  }
  credentials_ = credentials;
  // @@protoc_insertion_point(field_set_allocated:auth.LoginRequest.credentials)
}

// -------------------------------------------------------------------

// LoginResponse

// .auth.Status status = 1;
inline bool LoginResponse::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline void LoginResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::auth::Status& LoginResponse::status() const {
  const ::auth::Status* p = status_;
  // @@protoc_insertion_point(field_get:auth.LoginResponse.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::auth::Status*>(
      &::auth::_Status_default_instance_);
}
inline ::auth::Status* LoginResponse::release_status() {
  // @@protoc_insertion_point(field_release:auth.LoginResponse.status)
  
  ::auth::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::auth::Status* LoginResponse::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::auth::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:auth.LoginResponse.status)
  return status_;
}
inline void LoginResponse::set_allocated_status(::auth::Status* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:auth.LoginResponse.status)
}

// .auth.Cookie cookie = 2;
inline bool LoginResponse::has_cookie() const {
  return this != internal_default_instance() && cookie_ != nullptr;
}
inline void LoginResponse::clear_cookie() {
  if (GetArenaNoVirtual() == nullptr && cookie_ != nullptr) {
    delete cookie_;
  }
  cookie_ = nullptr;
}
inline const ::auth::Cookie& LoginResponse::cookie() const {
  const ::auth::Cookie* p = cookie_;
  // @@protoc_insertion_point(field_get:auth.LoginResponse.cookie)
  return p != nullptr ? *p : *reinterpret_cast<const ::auth::Cookie*>(
      &::auth::_Cookie_default_instance_);
}
inline ::auth::Cookie* LoginResponse::release_cookie() {
  // @@protoc_insertion_point(field_release:auth.LoginResponse.cookie)
  
  ::auth::Cookie* temp = cookie_;
  cookie_ = nullptr;
  return temp;
}
inline ::auth::Cookie* LoginResponse::mutable_cookie() {
  
  if (cookie_ == nullptr) {
    auto* p = CreateMaybeMessage<::auth::Cookie>(GetArenaNoVirtual());
    cookie_ = p;
  }
  // @@protoc_insertion_point(field_mutable:auth.LoginResponse.cookie)
  return cookie_;
}
inline void LoginResponse::set_allocated_cookie(::auth::Cookie* cookie) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cookie_;
  }
  if (cookie) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cookie = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cookie, submessage_arena);
    }
    
  } else {
    
  }
  cookie_ = cookie;
  // @@protoc_insertion_point(field_set_allocated:auth.LoginResponse.cookie)
}

// -------------------------------------------------------------------

// LogoutRequest

// .auth.Cookie cookie = 1;
inline bool LogoutRequest::has_cookie() const {
  return this != internal_default_instance() && cookie_ != nullptr;
}
inline void LogoutRequest::clear_cookie() {
  if (GetArenaNoVirtual() == nullptr && cookie_ != nullptr) {
    delete cookie_;
  }
  cookie_ = nullptr;
}
inline const ::auth::Cookie& LogoutRequest::cookie() const {
  const ::auth::Cookie* p = cookie_;
  // @@protoc_insertion_point(field_get:auth.LogoutRequest.cookie)
  return p != nullptr ? *p : *reinterpret_cast<const ::auth::Cookie*>(
      &::auth::_Cookie_default_instance_);
}
inline ::auth::Cookie* LogoutRequest::release_cookie() {
  // @@protoc_insertion_point(field_release:auth.LogoutRequest.cookie)
  
  ::auth::Cookie* temp = cookie_;
  cookie_ = nullptr;
  return temp;
}
inline ::auth::Cookie* LogoutRequest::mutable_cookie() {
  
  if (cookie_ == nullptr) {
    auto* p = CreateMaybeMessage<::auth::Cookie>(GetArenaNoVirtual());
    cookie_ = p;
  }
  // @@protoc_insertion_point(field_mutable:auth.LogoutRequest.cookie)
  return cookie_;
}
inline void LogoutRequest::set_allocated_cookie(::auth::Cookie* cookie) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cookie_;
  }
  if (cookie) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cookie = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cookie, submessage_arena);
    }
    
  } else {
    
  }
  cookie_ = cookie;
  // @@protoc_insertion_point(field_set_allocated:auth.LogoutRequest.cookie)
}

// -------------------------------------------------------------------

// LogoutResponse

// -------------------------------------------------------------------

// ValidationRequest

// .auth.Cookie cookie = 1;
inline bool ValidationRequest::has_cookie() const {
  return this != internal_default_instance() && cookie_ != nullptr;
}
inline void ValidationRequest::clear_cookie() {
  if (GetArenaNoVirtual() == nullptr && cookie_ != nullptr) {
    delete cookie_;
  }
  cookie_ = nullptr;
}
inline const ::auth::Cookie& ValidationRequest::cookie() const {
  const ::auth::Cookie* p = cookie_;
  // @@protoc_insertion_point(field_get:auth.ValidationRequest.cookie)
  return p != nullptr ? *p : *reinterpret_cast<const ::auth::Cookie*>(
      &::auth::_Cookie_default_instance_);
}
inline ::auth::Cookie* ValidationRequest::release_cookie() {
  // @@protoc_insertion_point(field_release:auth.ValidationRequest.cookie)
  
  ::auth::Cookie* temp = cookie_;
  cookie_ = nullptr;
  return temp;
}
inline ::auth::Cookie* ValidationRequest::mutable_cookie() {
  
  if (cookie_ == nullptr) {
    auto* p = CreateMaybeMessage<::auth::Cookie>(GetArenaNoVirtual());
    cookie_ = p;
  }
  // @@protoc_insertion_point(field_mutable:auth.ValidationRequest.cookie)
  return cookie_;
}
inline void ValidationRequest::set_allocated_cookie(::auth::Cookie* cookie) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cookie_;
  }
  if (cookie) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cookie = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cookie, submessage_arena);
    }
    
  } else {
    
  }
  cookie_ = cookie;
  // @@protoc_insertion_point(field_set_allocated:auth.ValidationRequest.cookie)
}

// string resource = 2;
inline void ValidationRequest::clear_resource() {
  resource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ValidationRequest::resource() const {
  // @@protoc_insertion_point(field_get:auth.ValidationRequest.resource)
  return resource_.GetNoArena();
}
inline void ValidationRequest::set_resource(const ::std::string& value) {
  
  resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:auth.ValidationRequest.resource)
}
#if LANG_CXX11
inline void ValidationRequest::set_resource(::std::string&& value) {
  
  resource_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:auth.ValidationRequest.resource)
}
#endif
inline void ValidationRequest::set_resource(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:auth.ValidationRequest.resource)
}
inline void ValidationRequest::set_resource(const char* value, size_t size) {
  
  resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:auth.ValidationRequest.resource)
}
inline ::std::string* ValidationRequest::mutable_resource() {
  
  // @@protoc_insertion_point(field_mutable:auth.ValidationRequest.resource)
  return resource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ValidationRequest::release_resource() {
  // @@protoc_insertion_point(field_release:auth.ValidationRequest.resource)
  
  return resource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ValidationRequest::set_allocated_resource(::std::string* resource) {
  if (resource != nullptr) {
    
  } else {
    
  }
  resource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resource);
  // @@protoc_insertion_point(field_set_allocated:auth.ValidationRequest.resource)
}

// -------------------------------------------------------------------

// ValidationResponse

// .auth.Status status = 1;
inline bool ValidationResponse::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline void ValidationResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::auth::Status& ValidationResponse::status() const {
  const ::auth::Status* p = status_;
  // @@protoc_insertion_point(field_get:auth.ValidationResponse.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::auth::Status*>(
      &::auth::_Status_default_instance_);
}
inline ::auth::Status* ValidationResponse::release_status() {
  // @@protoc_insertion_point(field_release:auth.ValidationResponse.status)
  
  ::auth::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::auth::Status* ValidationResponse::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::auth::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:auth.ValidationResponse.status)
  return status_;
}
inline void ValidationResponse::set_allocated_status(::auth::Status* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:auth.ValidationResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace auth

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::auth::Status_Code> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::auth::Status_Code>() {
  return ::auth::Status_Code_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_auth_2eproto
