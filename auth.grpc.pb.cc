// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: auth.proto

#include "auth.pb.h"
#include "auth.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace auth {

static const char* Authenticator_method_names[] = {
  "/auth.Authenticator/Login",
  "/auth.Authenticator/Logout",
  "/auth.Authenticator/Validate",
};

std::unique_ptr< Authenticator::Stub> Authenticator::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Authenticator::Stub> stub(new Authenticator::Stub(channel));
  return stub;
}

Authenticator::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Login_(Authenticator_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Logout_(Authenticator_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Validate_(Authenticator_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Authenticator::Stub::Login(::grpc::ClientContext* context, const ::auth::LoginRequest& request, ::auth::LoginResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Login_, context, request, response);
}

void Authenticator::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::auth::LoginRequest* request, ::auth::LoginResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void Authenticator::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auth::LoginResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::auth::LoginResponse>* Authenticator::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::auth::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::auth::LoginResponse>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::auth::LoginResponse>* Authenticator::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::auth::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::auth::LoginResponse>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, false);
}

::grpc::Status Authenticator::Stub::Logout(::grpc::ClientContext* context, const ::auth::LogoutRequest& request, ::auth::LogoutResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Logout_, context, request, response);
}

void Authenticator::Stub::experimental_async::Logout(::grpc::ClientContext* context, const ::auth::LogoutRequest* request, ::auth::LogoutResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Logout_, context, request, response, std::move(f));
}

void Authenticator::Stub::experimental_async::Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auth::LogoutResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Logout_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::auth::LogoutResponse>* Authenticator::Stub::AsyncLogoutRaw(::grpc::ClientContext* context, const ::auth::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::auth::LogoutResponse>::Create(channel_.get(), cq, rpcmethod_Logout_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::auth::LogoutResponse>* Authenticator::Stub::PrepareAsyncLogoutRaw(::grpc::ClientContext* context, const ::auth::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::auth::LogoutResponse>::Create(channel_.get(), cq, rpcmethod_Logout_, context, request, false);
}

::grpc::Status Authenticator::Stub::Validate(::grpc::ClientContext* context, const ::auth::ValidationRequest& request, ::auth::ValidationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Validate_, context, request, response);
}

void Authenticator::Stub::experimental_async::Validate(::grpc::ClientContext* context, const ::auth::ValidationRequest* request, ::auth::ValidationResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Validate_, context, request, response, std::move(f));
}

void Authenticator::Stub::experimental_async::Validate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::auth::ValidationResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Validate_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::auth::ValidationResponse>* Authenticator::Stub::AsyncValidateRaw(::grpc::ClientContext* context, const ::auth::ValidationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::auth::ValidationResponse>::Create(channel_.get(), cq, rpcmethod_Validate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::auth::ValidationResponse>* Authenticator::Stub::PrepareAsyncValidateRaw(::grpc::ClientContext* context, const ::auth::ValidationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::auth::ValidationResponse>::Create(channel_.get(), cq, rpcmethod_Validate_, context, request, false);
}

Authenticator::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Authenticator_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Authenticator::Service, ::auth::LoginRequest, ::auth::LoginResponse>(
          std::mem_fn(&Authenticator::Service::Login), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Authenticator_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Authenticator::Service, ::auth::LogoutRequest, ::auth::LogoutResponse>(
          std::mem_fn(&Authenticator::Service::Logout), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Authenticator_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Authenticator::Service, ::auth::ValidationRequest, ::auth::ValidationResponse>(
          std::mem_fn(&Authenticator::Service::Validate), this)));
}

Authenticator::Service::~Service() {
}

::grpc::Status Authenticator::Service::Login(::grpc::ServerContext* context, const ::auth::LoginRequest* request, ::auth::LoginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Authenticator::Service::Logout(::grpc::ServerContext* context, const ::auth::LogoutRequest* request, ::auth::LogoutResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Authenticator::Service::Validate(::grpc::ServerContext* context, const ::auth::ValidationRequest* request, ::auth::ValidationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace auth

